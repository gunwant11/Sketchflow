generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    createdTeams  Team[]    @relation("createdTeams")
    memberOfTeams Team[]    @relation("members")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Project {
    id        String   @id @default(cuid())
    title     String
    userId    String
    thumbnail String?
    user      User     @relation(fields: [userId], references: [id])
    layers    Layer[]
    favorite  Boolean  @default(false)
    teamId    String?
    team      Team?    @relation(fields: [teamId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Layer {
    id          String  @id @default(cuid())
    sortOrder   Int
    name        String
    visible     Boolean
    object      Json
    projectId   String
    containerId String?
    project     Project @relation(fields: [projectId], references: [id])
}

model Team {
    id        String    @id @default(cuid())
    name      String
    creatorId String
    image     String?   @default("https://ui-avatars.com/api/?name=Team&background=0D8ABC&color=fff")
    creator   User      @relation("createdTeams", fields: [creatorId], references: [id])
    members   User[]    @relation("members")
    projects  Project[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}
